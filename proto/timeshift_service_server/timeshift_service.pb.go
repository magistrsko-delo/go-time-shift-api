// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/timeshift_service_server/timeshift_service.proto

package timeshift_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TimeShiftRequest struct {
	MediaId              int32    `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeShiftRequest) Reset()         { *m = TimeShiftRequest{} }
func (m *TimeShiftRequest) String() string { return proto.CompactTextString(m) }
func (*TimeShiftRequest) ProtoMessage()    {}
func (*TimeShiftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_329f5050c796673e, []int{0}
}

func (m *TimeShiftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeShiftRequest.Unmarshal(m, b)
}
func (m *TimeShiftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeShiftRequest.Marshal(b, m, deterministic)
}
func (m *TimeShiftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeShiftRequest.Merge(m, src)
}
func (m *TimeShiftRequest) XXX_Size() int {
	return xxx_messageInfo_TimeShiftRequest.Size(m)
}
func (m *TimeShiftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeShiftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeShiftRequest proto.InternalMessageInfo

func (m *TimeShiftRequest) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

type TimeShitResponse struct {
	MediaId                  int32                      `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	Name                     string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SiteName                 string                     `protobuf:"bytes,3,opt,name=siteName,proto3" json:"siteName,omitempty"`
	Length                   int64                      `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Status                   int32                      `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Thumbnail                string                     `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	ProjectId                int32                      `protobuf:"varint,7,opt,name=projectId,proto3" json:"projectId,omitempty"`
	AwsBucketWholeMedia      string                     `protobuf:"bytes,8,opt,name=awsBucketWholeMedia,proto3" json:"awsBucketWholeMedia,omitempty"`
	AwsStorageNameWholeMedia string                     `protobuf:"bytes,9,opt,name=awsStorageNameWholeMedia,proto3" json:"awsStorageNameWholeMedia,omitempty"`
	Keywords                 []string                   `protobuf:"bytes,10,rep,name=keywords,proto3" json:"keywords,omitempty"`
	CreatedAt                int64                      `protobuf:"varint,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt                int64                      `protobuf:"varint,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	MediaUrl                 string                     `protobuf:"bytes,13,opt,name=mediaUrl,proto3" json:"mediaUrl,omitempty"`
	Data                     []*ChunkResolutionResponse `protobuf:"bytes,14,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-"`
	XXX_unrecognized         []byte                     `json:"-"`
	XXX_sizecache            int32                      `json:"-"`
}

func (m *TimeShitResponse) Reset()         { *m = TimeShitResponse{} }
func (m *TimeShitResponse) String() string { return proto.CompactTextString(m) }
func (*TimeShitResponse) ProtoMessage()    {}
func (*TimeShitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_329f5050c796673e, []int{1}
}

func (m *TimeShitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeShitResponse.Unmarshal(m, b)
}
func (m *TimeShitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeShitResponse.Marshal(b, m, deterministic)
}
func (m *TimeShitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeShitResponse.Merge(m, src)
}
func (m *TimeShitResponse) XXX_Size() int {
	return xxx_messageInfo_TimeShitResponse.Size(m)
}
func (m *TimeShitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeShitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimeShitResponse proto.InternalMessageInfo

func (m *TimeShitResponse) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

func (m *TimeShitResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TimeShitResponse) GetSiteName() string {
	if m != nil {
		return m.SiteName
	}
	return ""
}

func (m *TimeShitResponse) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *TimeShitResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TimeShitResponse) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *TimeShitResponse) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *TimeShitResponse) GetAwsBucketWholeMedia() string {
	if m != nil {
		return m.AwsBucketWholeMedia
	}
	return ""
}

func (m *TimeShitResponse) GetAwsStorageNameWholeMedia() string {
	if m != nil {
		return m.AwsStorageNameWholeMedia
	}
	return ""
}

func (m *TimeShitResponse) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *TimeShitResponse) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *TimeShitResponse) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *TimeShitResponse) GetMediaUrl() string {
	if m != nil {
		return m.MediaUrl
	}
	return ""
}

func (m *TimeShitResponse) GetData() []*ChunkResolutionResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type ChunkResolutionResponse struct {
	Resolution           string           `protobuf:"bytes,1,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Chunks               []*ChunkResponse `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChunkResolutionResponse) Reset()         { *m = ChunkResolutionResponse{} }
func (m *ChunkResolutionResponse) String() string { return proto.CompactTextString(m) }
func (*ChunkResolutionResponse) ProtoMessage()    {}
func (*ChunkResolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_329f5050c796673e, []int{2}
}

func (m *ChunkResolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkResolutionResponse.Unmarshal(m, b)
}
func (m *ChunkResolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkResolutionResponse.Marshal(b, m, deterministic)
}
func (m *ChunkResolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkResolutionResponse.Merge(m, src)
}
func (m *ChunkResolutionResponse) XXX_Size() int {
	return xxx_messageInfo_ChunkResolutionResponse.Size(m)
}
func (m *ChunkResolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkResolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkResolutionResponse proto.InternalMessageInfo

func (m *ChunkResolutionResponse) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *ChunkResolutionResponse) GetChunks() []*ChunkResponse {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type ChunkResponse struct {
	ChunkId              int32    `protobuf:"varint,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	Position             int32    `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	AwsBucketName        string   `protobuf:"bytes,3,opt,name=awsBucketName,proto3" json:"awsBucketName,omitempty"`
	AwsStorageName       string   `protobuf:"bytes,4,opt,name=awsStorageName,proto3" json:"awsStorageName,omitempty"`
	Length               float64  `protobuf:"fixed64,5,opt,name=length,proto3" json:"length,omitempty"`
	CreatedAt            int64    `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ChunksUrl            string   `protobuf:"bytes,7,opt,name=chunksUrl,proto3" json:"chunksUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkResponse) Reset()         { *m = ChunkResponse{} }
func (m *ChunkResponse) String() string { return proto.CompactTextString(m) }
func (*ChunkResponse) ProtoMessage()    {}
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_329f5050c796673e, []int{3}
}

func (m *ChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkResponse.Unmarshal(m, b)
}
func (m *ChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkResponse.Marshal(b, m, deterministic)
}
func (m *ChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkResponse.Merge(m, src)
}
func (m *ChunkResponse) XXX_Size() int {
	return xxx_messageInfo_ChunkResponse.Size(m)
}
func (m *ChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkResponse proto.InternalMessageInfo

func (m *ChunkResponse) GetChunkId() int32 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *ChunkResponse) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *ChunkResponse) GetAwsBucketName() string {
	if m != nil {
		return m.AwsBucketName
	}
	return ""
}

func (m *ChunkResponse) GetAwsStorageName() string {
	if m != nil {
		return m.AwsStorageName
	}
	return ""
}

func (m *ChunkResponse) GetLength() float64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ChunkResponse) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ChunkResponse) GetChunksUrl() string {
	if m != nil {
		return m.ChunksUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*TimeShiftRequest)(nil), "TimeShiftRequest")
	proto.RegisterType((*TimeShitResponse)(nil), "TimeShitResponse")
	proto.RegisterType((*ChunkResolutionResponse)(nil), "ChunkResolutionResponse")
	proto.RegisterType((*ChunkResponse)(nil), "ChunkResponse")
}

func init() {
	proto.RegisterFile("proto/timeshift_service_server/timeshift_service.proto", fileDescriptor_329f5050c796673e)
}

var fileDescriptor_329f5050c796673e = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xfd, 0x39, 0x49, 0x9d, 0x78, 0xfa, 0x4b, 0x04, 0x8b, 0x04, 0xab, 0x0a, 0x21, 0xcb, 0x42,
	0x55, 0x0e, 0x55, 0x40, 0x45, 0xe2, 0xc0, 0x8d, 0x70, 0x40, 0x39, 0xf0, 0x47, 0x6e, 0x11, 0x47,
	0xb4, 0xb5, 0xa7, 0xb1, 0x89, 0xed, 0x35, 0xbb, 0x6b, 0x22, 0xbe, 0x29, 0xdf, 0x80, 0xaf, 0x81,
	0x76, 0x6c, 0x6f, 0x92, 0xd2, 0x9c, 0xec, 0xf7, 0xde, 0xcc, 0xce, 0xce, 0xce, 0x1b, 0x78, 0x5d,
	0x2b, 0x69, 0xe4, 0x0b, 0x93, 0x97, 0xa8, 0xb3, 0xfc, 0xd6, 0x7c, 0xd3, 0xa8, 0x7e, 0xe6, 0x09,
	0xd2, 0x17, 0xd5, 0xbf, 0xc2, 0x82, 0x12, 0xa2, 0x0b, 0x78, 0x70, 0x9d, 0x97, 0x78, 0x65, 0xa5,
	0x18, 0x7f, 0x34, 0xa8, 0x0d, 0xe3, 0x30, 0x2e, 0x31, 0xcd, 0xc5, 0x2a, 0xe5, 0x5e, 0xe8, 0xcd,
	0x4f, 0xe2, 0x1e, 0x46, 0xbf, 0x87, 0x2e, 0xdc, 0xc4, 0xa8, 0x6b, 0x59, 0x69, 0x3c, 0x1e, 0xce,
	0x18, 0x8c, 0x2a, 0x51, 0x22, 0x1f, 0x84, 0xde, 0x3c, 0x88, 0xe9, 0x9f, 0x9d, 0xc1, 0x44, 0xe7,
	0x06, 0x3f, 0x5a, 0x7e, 0x48, 0xbc, 0xc3, 0xec, 0x31, 0xf8, 0x05, 0x56, 0x6b, 0x93, 0xf1, 0x51,
	0xe8, 0xcd, 0x87, 0x71, 0x87, 0x2c, 0xaf, 0x8d, 0x30, 0x8d, 0xe6, 0x27, 0x54, 0xa0, 0x43, 0xec,
	0x29, 0x04, 0x26, 0x6b, 0xca, 0x9b, 0x4a, 0xe4, 0x05, 0xf7, 0xe9, 0xb0, 0x1d, 0x61, 0xd5, 0x5a,
	0xc9, 0xef, 0x98, 0x98, 0x55, 0xca, 0xc7, 0x94, 0xb8, 0x23, 0xd8, 0x4b, 0x78, 0x24, 0xb6, 0x7a,
	0xd9, 0x24, 0x1b, 0x34, 0x5f, 0x33, 0x59, 0xe0, 0x07, 0x7b, 0x69, 0x3e, 0xa1, 0x53, 0xee, 0x93,
	0xd8, 0x1b, 0xe0, 0x62, 0xab, 0xaf, 0x8c, 0x54, 0x62, 0x4d, 0xf7, 0xdd, 0x4b, 0x0b, 0x28, 0xed,
	0xa8, 0x6e, 0xbb, 0xde, 0xe0, 0xaf, 0xad, 0x54, 0xa9, 0xe6, 0x10, 0x0e, 0x6d, 0xd7, 0x3d, 0xb6,
	0xf7, 0x4c, 0x14, 0x0a, 0x83, 0xe9, 0x5b, 0xc3, 0x4f, 0xa9, 0xf1, 0x1d, 0x61, 0xd5, 0xa6, 0x4e,
	0x3b, 0xf5, 0xff, 0x56, 0x75, 0x84, 0x3d, 0x97, 0x1e, 0xfb, 0x8b, 0x2a, 0xf8, 0xb4, 0x7d, 0xcd,
	0x1e, 0xb3, 0x0b, 0x18, 0xa5, 0xc2, 0x08, 0x3e, 0x0b, 0x87, 0xf3, 0xd3, 0x4b, 0xbe, 0x78, 0x97,
	0x35, 0xd5, 0x26, 0x46, 0x2d, 0x8b, 0xc6, 0xe4, 0xb2, 0xea, 0xe7, 0x17, 0x53, 0x54, 0x24, 0xe0,
	0xc9, 0x91, 0x00, 0xf6, 0x0c, 0x40, 0x39, 0x96, 0x66, 0x1c, 0xc4, 0x7b, 0x0c, 0x3b, 0x07, 0x3f,
	0xb1, 0xa9, 0x9a, 0x0f, 0xa8, 0xd4, 0xcc, 0x95, 0x6a, 0x0b, 0x74, 0x6a, 0xf4, 0xc7, 0x83, 0xe9,
	0x81, 0x62, 0xad, 0x43, 0xda, 0xce, 0x3a, 0x1d, 0xb4, 0x8d, 0xd5, 0x52, 0xe7, 0x54, 0x71, 0x40,
	0x92, 0xc3, 0xec, 0x39, 0x4c, 0xdd, 0x7c, 0xf6, 0x7c, 0x74, 0x48, 0xb2, 0x73, 0x98, 0x1d, 0x8e,
	0x83, 0x4c, 0x15, 0xc4, 0x77, 0xd8, 0x3d, 0xd3, 0x59, 0x73, 0x79, 0xce, 0x74, 0x07, 0x63, 0xf1,
	0xef, 0x19, 0x4b, 0xdb, 0x95, 0x7d, 0xf9, 0x71, 0x6b, 0x3d, 0x47, 0x5c, 0x7e, 0x82, 0xe0, 0xba,
	0x5f, 0x38, 0xb6, 0x04, 0xfe, 0x1e, 0x0d, 0xf9, 0x80, 0xba, 0x5f, 0x55, 0xb7, 0x52, 0x95, 0x82,
	0x5a, 0x79, 0xb8, 0xb8, 0xbb, 0x7d, 0x67, 0x8e, 0x72, 0x1b, 0x16, 0xfd, 0xb7, 0x9c, 0xc0, 0x68,
	0xad, 0xea, 0xe4, 0xb3, 0x77, 0xe3, 0xd3, 0xde, 0xbe, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf4,
	0xa3, 0xfb, 0x4a, 0xf1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeshiftClient is the client API for Timeshift service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeshiftClient interface {
	GetMediaChunkInformation(ctx context.Context, in *TimeShiftRequest, opts ...grpc.CallOption) (*TimeShitResponse, error)
}

type timeshiftClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeshiftClient(cc grpc.ClientConnInterface) TimeshiftClient {
	return &timeshiftClient{cc}
}

func (c *timeshiftClient) GetMediaChunkInformation(ctx context.Context, in *TimeShiftRequest, opts ...grpc.CallOption) (*TimeShitResponse, error) {
	out := new(TimeShitResponse)
	err := c.cc.Invoke(ctx, "/Timeshift/GetMediaChunkInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeshiftServer is the server API for Timeshift service.
type TimeshiftServer interface {
	GetMediaChunkInformation(context.Context, *TimeShiftRequest) (*TimeShitResponse, error)
}

// UnimplementedTimeshiftServer can be embedded to have forward compatible implementations.
type UnimplementedTimeshiftServer struct {
}

func (*UnimplementedTimeshiftServer) GetMediaChunkInformation(ctx context.Context, req *TimeShiftRequest) (*TimeShitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaChunkInformation not implemented")
}

func RegisterTimeshiftServer(s *grpc.Server, srv TimeshiftServer) {
	s.RegisterService(&_Timeshift_serviceDesc, srv)
}

func _Timeshift_GetMediaChunkInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeshiftServer).GetMediaChunkInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Timeshift/GetMediaChunkInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeshiftServer).GetMediaChunkInformation(ctx, req.(*TimeShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Timeshift_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Timeshift",
	HandlerType: (*TimeshiftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMediaChunkInformation",
			Handler:    _Timeshift_GetMediaChunkInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/timeshift_service_server/timeshift_service.proto",
}

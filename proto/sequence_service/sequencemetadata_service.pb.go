// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/sequence_service/sequencemetadata_service.proto

package sequencemetadata_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetProjectSequencesRequest struct {
	ProjectId            int32    `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProjectSequencesRequest) Reset()         { *m = GetProjectSequencesRequest{} }
func (m *GetProjectSequencesRequest) String() string { return proto.CompactTextString(m) }
func (*GetProjectSequencesRequest) ProtoMessage()    {}
func (*GetProjectSequencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{0}
}

func (m *GetProjectSequencesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectSequencesRequest.Unmarshal(m, b)
}
func (m *GetProjectSequencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectSequencesRequest.Marshal(b, m, deterministic)
}
func (m *GetProjectSequencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectSequencesRequest.Merge(m, src)
}
func (m *GetProjectSequencesRequest) XXX_Size() int {
	return xxx_messageInfo_GetProjectSequencesRequest.Size(m)
}
func (m *GetProjectSequencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectSequencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectSequencesRequest proto.InternalMessageInfo

func (m *GetProjectSequencesRequest) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

type SequenceIdRequest struct {
	SequenceId           int32    `protobuf:"varint,1,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequenceIdRequest) Reset()         { *m = SequenceIdRequest{} }
func (m *SequenceIdRequest) String() string { return proto.CompactTextString(m) }
func (*SequenceIdRequest) ProtoMessage()    {}
func (*SequenceIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{1}
}

func (m *SequenceIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceIdRequest.Unmarshal(m, b)
}
func (m *SequenceIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceIdRequest.Marshal(b, m, deterministic)
}
func (m *SequenceIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceIdRequest.Merge(m, src)
}
func (m *SequenceIdRequest) XXX_Size() int {
	return xxx_messageInfo_SequenceIdRequest.Size(m)
}
func (m *SequenceIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceIdRequest proto.InternalMessageInfo

func (m *SequenceIdRequest) GetSequenceId() int32 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

type SequenceMediaRequest struct {
	SequenceId           int32    `protobuf:"varint,1,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`
	MediaId              int32    `protobuf:"varint,2,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequenceMediaRequest) Reset()         { *m = SequenceMediaRequest{} }
func (m *SequenceMediaRequest) String() string { return proto.CompactTextString(m) }
func (*SequenceMediaRequest) ProtoMessage()    {}
func (*SequenceMediaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{2}
}

func (m *SequenceMediaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceMediaRequest.Unmarshal(m, b)
}
func (m *SequenceMediaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceMediaRequest.Marshal(b, m, deterministic)
}
func (m *SequenceMediaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceMediaRequest.Merge(m, src)
}
func (m *SequenceMediaRequest) XXX_Size() int {
	return xxx_messageInfo_SequenceMediaRequest.Size(m)
}
func (m *SequenceMediaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceMediaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceMediaRequest proto.InternalMessageInfo

func (m *SequenceMediaRequest) GetSequenceId() int32 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *SequenceMediaRequest) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

type NewSequenceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId            int32    `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Thumbnail            string   `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewSequenceRequest) Reset()         { *m = NewSequenceRequest{} }
func (m *NewSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*NewSequenceRequest) ProtoMessage()    {}
func (*NewSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{3}
}

func (m *NewSequenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewSequenceRequest.Unmarshal(m, b)
}
func (m *NewSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewSequenceRequest.Marshal(b, m, deterministic)
}
func (m *NewSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewSequenceRequest.Merge(m, src)
}
func (m *NewSequenceRequest) XXX_Size() int {
	return xxx_messageInfo_NewSequenceRequest.Size(m)
}
func (m *NewSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewSequenceRequest proto.InternalMessageInfo

func (m *NewSequenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewSequenceRequest) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *NewSequenceRequest) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

type UpdateSequenceRequest struct {
	SequenceId           int32    `protobuf:"varint,1,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status               int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ProjectId            int32    `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Thumbnail            string   `protobuf:"bytes,5,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSequenceRequest) Reset()         { *m = UpdateSequenceRequest{} }
func (m *UpdateSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSequenceRequest) ProtoMessage()    {}
func (*UpdateSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{4}
}

func (m *UpdateSequenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSequenceRequest.Unmarshal(m, b)
}
func (m *UpdateSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSequenceRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSequenceRequest.Merge(m, src)
}
func (m *UpdateSequenceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSequenceRequest.Size(m)
}
func (m *UpdateSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSequenceRequest proto.InternalMessageInfo

func (m *UpdateSequenceRequest) GetSequenceId() int32 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *UpdateSequenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateSequenceRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateSequenceRequest) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *UpdateSequenceRequest) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

type ProjectSequencesResponse struct {
	Data                 []*Sequence `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ProjectSequencesResponse) Reset()         { *m = ProjectSequencesResponse{} }
func (m *ProjectSequencesResponse) String() string { return proto.CompactTextString(m) }
func (*ProjectSequencesResponse) ProtoMessage()    {}
func (*ProjectSequencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{5}
}

func (m *ProjectSequencesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectSequencesResponse.Unmarshal(m, b)
}
func (m *ProjectSequencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectSequencesResponse.Marshal(b, m, deterministic)
}
func (m *ProjectSequencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectSequencesResponse.Merge(m, src)
}
func (m *ProjectSequencesResponse) XXX_Size() int {
	return xxx_messageInfo_ProjectSequencesResponse.Size(m)
}
func (m *ProjectSequencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectSequencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectSequencesResponse proto.InternalMessageInfo

func (m *ProjectSequencesResponse) GetData() []*Sequence {
	if m != nil {
		return m.Data
	}
	return nil
}

type SequenceMediaResponse struct {
	Sequence             *Sequence `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	MediaIds             []int32   `protobuf:"varint,2,rep,packed,name=mediaIds,proto3" json:"mediaIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SequenceMediaResponse) Reset()         { *m = SequenceMediaResponse{} }
func (m *SequenceMediaResponse) String() string { return proto.CompactTextString(m) }
func (*SequenceMediaResponse) ProtoMessage()    {}
func (*SequenceMediaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{6}
}

func (m *SequenceMediaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceMediaResponse.Unmarshal(m, b)
}
func (m *SequenceMediaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceMediaResponse.Marshal(b, m, deterministic)
}
func (m *SequenceMediaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceMediaResponse.Merge(m, src)
}
func (m *SequenceMediaResponse) XXX_Size() int {
	return xxx_messageInfo_SequenceMediaResponse.Size(m)
}
func (m *SequenceMediaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceMediaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceMediaResponse proto.InternalMessageInfo

func (m *SequenceMediaResponse) GetSequence() *Sequence {
	if m != nil {
		return m.Sequence
	}
	return nil
}

func (m *SequenceMediaResponse) GetMediaIds() []int32 {
	if m != nil {
		return m.MediaIds
	}
	return nil
}

type StatusResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{7}
}

func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StatusResponse) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type Sequence struct {
	SequenceId           int32    `protobuf:"varint,1,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId            int32    `protobuf:"varint,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Thumbnail            string   `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Status               int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt            int64    `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sequence) Reset()         { *m = Sequence{} }
func (m *Sequence) String() string { return proto.CompactTextString(m) }
func (*Sequence) ProtoMessage()    {}
func (*Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_94e8c9261898d0ba, []int{8}
}

func (m *Sequence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sequence.Unmarshal(m, b)
}
func (m *Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sequence.Marshal(b, m, deterministic)
}
func (m *Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sequence.Merge(m, src)
}
func (m *Sequence) XXX_Size() int {
	return xxx_messageInfo_Sequence.Size(m)
}
func (m *Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_Sequence proto.InternalMessageInfo

func (m *Sequence) GetSequenceId() int32 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *Sequence) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sequence) GetProjectId() int32 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *Sequence) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *Sequence) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Sequence) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Sequence) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*GetProjectSequencesRequest)(nil), "GetProjectSequencesRequest")
	proto.RegisterType((*SequenceIdRequest)(nil), "SequenceIdRequest")
	proto.RegisterType((*SequenceMediaRequest)(nil), "SequenceMediaRequest")
	proto.RegisterType((*NewSequenceRequest)(nil), "NewSequenceRequest")
	proto.RegisterType((*UpdateSequenceRequest)(nil), "UpdateSequenceRequest")
	proto.RegisterType((*ProjectSequencesResponse)(nil), "ProjectSequencesResponse")
	proto.RegisterType((*SequenceMediaResponse)(nil), "SequenceMediaResponse")
	proto.RegisterType((*StatusResponse)(nil), "StatusResponse")
	proto.RegisterType((*Sequence)(nil), "Sequence")
}

func init() {
	proto.RegisterFile("proto/sequence_service/sequencemetadata_service.proto", fileDescriptor_94e8c9261898d0ba)
}

var fileDescriptor_94e8c9261898d0ba = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdb, 0x8e, 0xd3, 0x30,
	0x10, 0xdd, 0x34, 0x49, 0xb7, 0x1d, 0xa4, 0xb2, 0x78, 0x69, 0x09, 0xe5, 0xa2, 0xca, 0x12, 0x52,
	0x9f, 0x8c, 0xb4, 0x2b, 0x84, 0xe0, 0x81, 0xcb, 0x22, 0x81, 0xfa, 0x00, 0xac, 0xb2, 0xc0, 0x03,
	0x2f, 0xc8, 0x1b, 0x8f, 0x4a, 0xd1, 0xa6, 0x09, 0xb1, 0x03, 0x9f, 0xc3, 0x1f, 0xf1, 0x1d, 0x7c,
	0x06, 0x8a, 0x13, 0x3b, 0x4d, 0x9a, 0x2d, 0x97, 0xb7, 0x78, 0xc6, 0x67, 0x7c, 0xce, 0x9c, 0x99,
	0xc0, 0x83, 0x34, 0x4b, 0x54, 0x72, 0x5f, 0xe2, 0xd7, 0x1c, 0xd7, 0x11, 0x7e, 0x92, 0x98, 0x7d,
	0x5b, 0x45, 0x68, 0x03, 0x31, 0x2a, 0x2e, 0xb8, 0xe2, 0x26, 0xc1, 0xf4, 0x7d, 0xfa, 0x18, 0xa6,
	0xaf, 0x50, 0x9d, 0x66, 0xc9, 0x17, 0x8c, 0xd4, 0x59, 0x75, 0x57, 0x86, 0xc5, 0x87, 0x54, 0xe4,
	0x36, 0x0c, 0xd3, 0x32, 0xb5, 0x10, 0x81, 0x33, 0x73, 0xe6, 0x7e, 0x58, 0x07, 0xe8, 0x31, 0x5c,
	0x33, 0x88, 0x85, 0x30, 0x90, 0xbb, 0x00, 0xd2, 0x06, 0x2b, 0xcc, 0x46, 0x84, 0x9e, 0xc2, 0x75,
	0x03, 0x7a, 0x8d, 0x62, 0xc5, 0xff, 0x12, 0x47, 0x02, 0xd8, 0x8f, 0x8b, 0xfb, 0x0b, 0x11, 0xf4,
	0x74, 0xd2, 0x1c, 0xa9, 0x00, 0xf2, 0x06, 0xbf, 0x9b, 0xa2, 0xa6, 0x1e, 0x01, 0x6f, 0xcd, 0x63,
	0xd4, 0x95, 0x86, 0xa1, 0xfe, 0x6e, 0xca, 0xe9, 0xb5, 0xe4, 0x14, 0x59, 0xf5, 0x39, 0x8f, 0xcf,
	0xd7, 0x7c, 0x75, 0x11, 0xb8, 0x1a, 0x56, 0x07, 0xe8, 0x0f, 0x07, 0xc6, 0xef, 0x53, 0xc1, 0x15,
	0xb6, 0x5f, 0xfa, 0x13, 0x73, 0xc3, 0xa4, 0xb7, 0xc1, 0x64, 0x02, 0x7d, 0xa9, 0xb8, 0xca, 0xa5,
	0x7e, 0xc8, 0x0f, 0xab, 0x53, 0x93, 0xa1, 0xb7, 0x93, 0xa1, 0xdf, 0x66, 0xf8, 0x08, 0x82, 0x6d,
	0x1f, 0x65, 0x9a, 0xac, 0x25, 0x92, 0x3b, 0xe0, 0x15, 0xe6, 0x07, 0xce, 0xcc, 0x9d, 0x5f, 0x39,
	0x1a, 0x32, 0xab, 0x41, 0x87, 0xe9, 0x47, 0x18, 0xb7, 0x4c, 0xa9, 0x70, 0xf7, 0x60, 0x60, 0x94,
	0x68, 0x65, 0x0d, 0xac, 0x4d, 0x91, 0x29, 0x0c, 0x2a, 0x37, 0x64, 0xd0, 0x9b, 0xb9, 0x73, 0x3f,
	0xb4, 0x67, 0xfa, 0x01, 0x46, 0x67, 0x5a, 0x9c, 0x2d, 0x5a, 0x8b, 0x77, 0x1a, 0xe2, 0xb5, 0xc5,
	0x52, 0xf2, 0xa5, 0xe9, 0x95, 0x39, 0x16, 0x2d, 0xd4, 0xf4, 0x8b, 0x66, 0x0d, 0x2a, 0xce, 0x3f,
	0x1d, 0x18, 0x18, 0x2a, 0xff, 0xe5, 0x41, 0xa3, 0xd7, 0xee, 0xce, 0x5e, 0x7b, 0xad, 0x5e, 0x6f,
	0x48, 0xf0, 0xdb, 0xfe, 0x45, 0x19, 0x72, 0x85, 0xe2, 0xb9, 0x0a, 0xfa, 0x33, 0x67, 0xee, 0x86,
	0x75, 0xa0, 0xc8, 0xe6, 0x7a, 0x84, 0x8a, 0xec, 0x7e, 0x99, 0xb5, 0x81, 0xa3, 0x5f, 0x2e, 0x1c,
	0xd4, 0x2e, 0x94, 0xdb, 0x4a, 0xde, 0xc2, 0xe1, 0x72, 0x7b, 0x3f, 0xc9, 0x2d, 0x76, 0xf9, 0xd6,
	0x4e, 0x6f, 0xb2, 0xcb, 0xe6, 0x80, 0xee, 0x91, 0x67, 0x70, 0xb0, 0x44, 0xd5, 0x70, 0x9b, 0x10,
	0xb6, 0xb5, 0xc7, 0xd3, 0x09, 0xeb, 0x9c, 0x08, 0xba, 0x47, 0x9e, 0xc2, 0xa8, 0x94, 0x64, 0xbb,
	0x7f, 0xc8, 0xb6, 0x17, 0x70, 0x47, 0x81, 0x13, 0x18, 0xe5, 0x8d, 0x4d, 0x22, 0x13, 0xd6, 0xb9,
	0x5a, 0x3b, 0x6a, 0x3c, 0x84, 0x91, 0xc0, 0x0b, 0xdc, 0xa8, 0xd1, 0x25, 0xe2, 0x2a, 0x6b, 0x8e,
	0x1e, 0xdd, 0x23, 0x4f, 0x80, 0x70, 0x21, 0x74, 0xb9, 0x77, 0x89, 0x05, 0x8f, 0x59, 0xd7, 0x4f,
	0xa9, 0x0b, 0xff, 0x02, 0x6e, 0x94, 0x0f, 0xeb, 0x8b, 0x2f, 0xb3, 0x24, 0xfe, 0xf7, 0x22, 0x27,
	0x7d, 0xf0, 0x96, 0x59, 0x1a, 0x9d, 0xf7, 0xf5, 0x4f, 0xf8, 0xf8, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x7d, 0xc6, 0x58, 0xbd, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SequenceMetadataClient is the client API for SequenceMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequenceMetadataClient interface {
	GetProjectSequences(ctx context.Context, in *GetProjectSequencesRequest, opts ...grpc.CallOption) (*ProjectSequencesResponse, error)
	GetSequenceMedia(ctx context.Context, in *SequenceIdRequest, opts ...grpc.CallOption) (*SequenceMediaResponse, error)
	CreateSequence(ctx context.Context, in *NewSequenceRequest, opts ...grpc.CallOption) (*SequenceMediaResponse, error)
	UpdateSequence(ctx context.Context, in *UpdateSequenceRequest, opts ...grpc.CallOption) (*SequenceMediaResponse, error)
	DeleteSequence(ctx context.Context, in *SequenceIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	AddMediaToSequence(ctx context.Context, in *SequenceMediaRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DeleteMediaFromSequence(ctx context.Context, in *SequenceMediaRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type sequenceMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewSequenceMetadataClient(cc grpc.ClientConnInterface) SequenceMetadataClient {
	return &sequenceMetadataClient{cc}
}

func (c *sequenceMetadataClient) GetProjectSequences(ctx context.Context, in *GetProjectSequencesRequest, opts ...grpc.CallOption) (*ProjectSequencesResponse, error) {
	out := new(ProjectSequencesResponse)
	err := c.cc.Invoke(ctx, "/SequenceMetadata/getProjectSequences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceMetadataClient) GetSequenceMedia(ctx context.Context, in *SequenceIdRequest, opts ...grpc.CallOption) (*SequenceMediaResponse, error) {
	out := new(SequenceMediaResponse)
	err := c.cc.Invoke(ctx, "/SequenceMetadata/getSequenceMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceMetadataClient) CreateSequence(ctx context.Context, in *NewSequenceRequest, opts ...grpc.CallOption) (*SequenceMediaResponse, error) {
	out := new(SequenceMediaResponse)
	err := c.cc.Invoke(ctx, "/SequenceMetadata/createSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceMetadataClient) UpdateSequence(ctx context.Context, in *UpdateSequenceRequest, opts ...grpc.CallOption) (*SequenceMediaResponse, error) {
	out := new(SequenceMediaResponse)
	err := c.cc.Invoke(ctx, "/SequenceMetadata/updateSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceMetadataClient) DeleteSequence(ctx context.Context, in *SequenceIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/SequenceMetadata/deleteSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceMetadataClient) AddMediaToSequence(ctx context.Context, in *SequenceMediaRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/SequenceMetadata/addMediaToSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceMetadataClient) DeleteMediaFromSequence(ctx context.Context, in *SequenceMediaRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/SequenceMetadata/deleteMediaFromSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceMetadataServer is the server API for SequenceMetadata service.
type SequenceMetadataServer interface {
	GetProjectSequences(context.Context, *GetProjectSequencesRequest) (*ProjectSequencesResponse, error)
	GetSequenceMedia(context.Context, *SequenceIdRequest) (*SequenceMediaResponse, error)
	CreateSequence(context.Context, *NewSequenceRequest) (*SequenceMediaResponse, error)
	UpdateSequence(context.Context, *UpdateSequenceRequest) (*SequenceMediaResponse, error)
	DeleteSequence(context.Context, *SequenceIdRequest) (*StatusResponse, error)
	AddMediaToSequence(context.Context, *SequenceMediaRequest) (*StatusResponse, error)
	DeleteMediaFromSequence(context.Context, *SequenceMediaRequest) (*StatusResponse, error)
}

// UnimplementedSequenceMetadataServer can be embedded to have forward compatible implementations.
type UnimplementedSequenceMetadataServer struct {
}

func (*UnimplementedSequenceMetadataServer) GetProjectSequences(ctx context.Context, req *GetProjectSequencesRequest) (*ProjectSequencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectSequences not implemented")
}
func (*UnimplementedSequenceMetadataServer) GetSequenceMedia(ctx context.Context, req *SequenceIdRequest) (*SequenceMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSequenceMedia not implemented")
}
func (*UnimplementedSequenceMetadataServer) CreateSequence(ctx context.Context, req *NewSequenceRequest) (*SequenceMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSequence not implemented")
}
func (*UnimplementedSequenceMetadataServer) UpdateSequence(ctx context.Context, req *UpdateSequenceRequest) (*SequenceMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSequence not implemented")
}
func (*UnimplementedSequenceMetadataServer) DeleteSequence(ctx context.Context, req *SequenceIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSequence not implemented")
}
func (*UnimplementedSequenceMetadataServer) AddMediaToSequence(ctx context.Context, req *SequenceMediaRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMediaToSequence not implemented")
}
func (*UnimplementedSequenceMetadataServer) DeleteMediaFromSequence(ctx context.Context, req *SequenceMediaRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaFromSequence not implemented")
}

func RegisterSequenceMetadataServer(s *grpc.Server, srv SequenceMetadataServer) {
	s.RegisterService(&_SequenceMetadata_serviceDesc, srv)
}

func _SequenceMetadata_GetProjectSequences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectSequencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceMetadataServer).GetProjectSequences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SequenceMetadata/GetProjectSequences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceMetadataServer).GetProjectSequences(ctx, req.(*GetProjectSequencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceMetadata_GetSequenceMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceMetadataServer).GetSequenceMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SequenceMetadata/GetSequenceMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceMetadataServer).GetSequenceMedia(ctx, req.(*SequenceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceMetadata_CreateSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceMetadataServer).CreateSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SequenceMetadata/CreateSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceMetadataServer).CreateSequence(ctx, req.(*NewSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceMetadata_UpdateSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceMetadataServer).UpdateSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SequenceMetadata/UpdateSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceMetadataServer).UpdateSequence(ctx, req.(*UpdateSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceMetadata_DeleteSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceMetadataServer).DeleteSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SequenceMetadata/DeleteSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceMetadataServer).DeleteSequence(ctx, req.(*SequenceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceMetadata_AddMediaToSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceMetadataServer).AddMediaToSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SequenceMetadata/AddMediaToSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceMetadataServer).AddMediaToSequence(ctx, req.(*SequenceMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceMetadata_DeleteMediaFromSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceMetadataServer).DeleteMediaFromSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SequenceMetadata/DeleteMediaFromSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceMetadataServer).DeleteMediaFromSequence(ctx, req.(*SequenceMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SequenceMetadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SequenceMetadata",
	HandlerType: (*SequenceMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProjectSequences",
			Handler:    _SequenceMetadata_GetProjectSequences_Handler,
		},
		{
			MethodName: "getSequenceMedia",
			Handler:    _SequenceMetadata_GetSequenceMedia_Handler,
		},
		{
			MethodName: "createSequence",
			Handler:    _SequenceMetadata_CreateSequence_Handler,
		},
		{
			MethodName: "updateSequence",
			Handler:    _SequenceMetadata_UpdateSequence_Handler,
		},
		{
			MethodName: "deleteSequence",
			Handler:    _SequenceMetadata_DeleteSequence_Handler,
		},
		{
			MethodName: "addMediaToSequence",
			Handler:    _SequenceMetadata_AddMediaToSequence_Handler,
		},
		{
			MethodName: "deleteMediaFromSequence",
			Handler:    _SequenceMetadata_DeleteMediaFromSequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sequence_service/sequencemetadata_service.proto",
}
